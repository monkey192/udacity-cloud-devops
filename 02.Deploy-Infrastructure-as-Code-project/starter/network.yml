Description: CD12352 - Infrastructure as Code Project - Network

Parameters:
  Application:
    Description: An Application name that is prefixed to resource names
    Type: String
    Default: udacity

  EnvironmentName:
    Description: An environment name that is postfixed to resource names
    Type: String
    Default: dev

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-vpc-${EnvironmentName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  AttachGatewayToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-public-subnet-1-${EnvironmentName}
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-private-subnet-1-${EnvironmentName}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-public-subnet-2-${EnvironmentName}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-private-subnet-2-${EnvironmentName}

# NAT gateway
# For demo: just create one NAT gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: AttachGatewayToVPC
  
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${Application}-public-routetable-${EnvironmentName}

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssocication1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssocication2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        # - Key: Name
        #   Value: !Sub ${Application}-private-routetable-${EnvironmentName}

  PrivateToInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnetPrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetPrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${Application}-${EnvironmentName}-VpcId
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${Application}-${EnvironmentName}-PublicSubnets
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${Application}-${EnvironmentName}-PrivateSubnets
